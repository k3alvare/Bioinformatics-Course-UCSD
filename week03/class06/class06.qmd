---
title: "class06"
author: "Kyle Alvarez"
format: pdf
toc: true
---

Make three student vectors that have the same length, but have different values and print them out to see if the vectors contain the specified values
```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

student1
student2
student3
```

# Function basics

All functions in R consit of at least 3 things:
- A **name** (we can pick this but it must start with a character)
- input **arguments** (there can be multiple comma separated inputs
- The **body** (where the work actually happens)

Can start by using the `mean()` function to calculate an average

```{r}
mean(student1)
```

Can find the minimum value of a vector using the `min()` function
Note: Can use F1 to as shortcut to see what a function does
```{r}
min(student1)
```

To find the index at which the minimum exists, can use `which.min()`
```{r}
which.min(student1)
```

I can get the same vector without the 8th element with the minus index trick...
```{r}
student1[-8]
```

So I will combine the output of `which.min()` with the minus index trick to get the student scores without the lowest value
```{r}
mean(student1[-which.min(student1)])
```

For student 2 and student 3 this gives NA
```{r}
mean(student2[-which.min(student2)])
mean(student3[-which.min(student3)])
```

Can replace all NA (missing values) with zero. 
```{r}
student3 [ is.na(student3) ] <- 0
student3
mean( (student3[ -which.min(student3)]) )
```

Copy pasting is silly and dangerous - time to write a function
Class function:
```{r}
x <- student3
x[ is.na(x)] <- 0
mean( x[ -which.min(x)]  )
```

^ Working snippet of code that can be simplified to work with any student `x`.

## My Grade Function

Now turn into a function:
```{r}
grade <- function(x){
  x[ is.na(x)] <- 0 # assigns 0 to all NA occurrences
  mean( x[ -which.min(x)]  ) # removes the lowest grade, then takes the mean of the remaining grades
}
```

```{r}
grade(student1)
```

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <-  read.csv(url, row.names = 1)
```


Have a look at the first 6 rows
```{r}
head(gradebook)
```

Time to learn about the `apply()` function. 1 for rows, or 2 for columns

```{r}
results <- apply(gradebook, 1, grade)

```

## Q2
> Q2 : Which student did the best overall?

```{r}
results[ which.max(results) ]
```

## Q3
> Q3 : Which homework was toughest on the students (o.e. obtained the lowest scores overall)?

```{r}
which.min( apply(gradebook, 2, sum, na.rm=TRUE) )
lowestScoreOverall <- apply(gradebook, 2, grade)
lowestScoreOverall[which.min(lowestScoreOverall) ]
```

## Q4
> Q4 : From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
mask <- gradebook
mask[ is.na(mask) ] <- 0

cor(mask$hw5, results)
```

```{r}
apply(mask, 2, cor, y=results)
```



My function:

```{r}
grade2 <- function(arg1) {
  arg1[is.na(arg1)] <- 0 # changes all the NA values to 0
  newVector <- mean(arg1[-which.min(arg1)])
}
```


