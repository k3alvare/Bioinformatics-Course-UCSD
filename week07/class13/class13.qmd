---
title: "Class 13: RNASeq Mini Project"
author: "Kyle"
format: gfm
---

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.

## RNASeq input data

Again I need to things

- countData
- colData

```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names = 1)
head(colData)
```

```{r}
countData <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
head(countData)
```

> Q. Complete the code below to remove the troublesome first column from countData

There is an unwated first column "length" in the countData. I will need to remove this first before going on to further analysis:
```{r}
counts <- countData[, -1]
head(counts)
```

```{r}
all(colnames(counts) == rownames(colData))
```

## Filtering 
There is a lot of data with 0 counts for read, so we want to filter them out before using DeSeq.
> Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
# Filter count data where you have 0 read count across all samples.
to.keep = rowSums(counts) > 0
counts <-counts[to.keep,]
head(counts)
```

How many genes do we have left?
```{r}
nrow(counts)
```


## Run DeSeq Analysis
Time to use DESeq 

```{r, message=FALSE}
library(DESeq2)
```


1st step Setup the object required by DESeq

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = colData,
                       design = ~condition)
```


Run the analysis
```{r}
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```


> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```


```{r}
head(res)
```

## Volcano Plot
```{r}
plot(res$log2FoldChange, -log(res$padj))
```

> Q. Improve this plot by completing the below code, which adds color and axis labels

I want to add some color. Take a fold-change threshold pf -2/+2 and an alpha p-adh (P-value) threshold of 0.05.

```{r}
mycols <- rep("gray", nrow(counts))
mycols [ abs(res$log2FoldChange ) > 2] = "blue"
mycols [ res$padj > 0.05 ] <- "gray"
plot(res$log2FoldChange, -log(res$padj), col = mycols)
abline(v=c(-2,+2))
abline(h = -log(0.05) )
```


```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(counts) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] = "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] = "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```

## Adding gene annotation

I am going to add the database identifiers I need for pathway analysis
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=rownames(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GO",
                    multiVals="first")

head(res)
```

> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

## Pathway Analysis

Again we will use the `gage()` package and function with a focus first on KEGG and go
```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

```
Recall that `gage()` wants only a vector of improtance as input that has names in ENTREZ ID format.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```
Generate a colored pathway figure for
```{r}
library(pathview)
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![Cell Cycle](hsa04110.pathview.png)

We can look at the top5 upregulated pathways 
```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
We can then generate the `pathview()` functions to plot the top 5 up-regulated pathways.
```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
## Focus on top 5 downpregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresidsdown = substr(keggrespathways, start=1, stop=8)
keggresidsdown

```
```{r}
pathview(gene.data=foldchanges, pathway.id=keggresidsdown, species="hsa")
```

## Gene Ontology

We can do a similar procedure with gene ontology. **go.sets.hs** has all GO terms. **go.subs.hs** is a named list containing indexes for the BP, CC, and MF ontologies.

Let's focus on Biological Processes (i.e BP)
```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis

Reactome is database consisting of biological molecules and their relation to pathways and processes.

Let's now conduct over-representation enrichment analysis and pathway-topology analysis with Reactome using the previous list of significant genes generated from our differential expression results above.

First, Using R, output the list of significant genes at the 0.05 level as a plain text file:

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```
```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway that has the most significant "Entities p-value" is the Endosomal/Vacuolar Pathway. And the most significant pathways listed does not match my previous KEGG results (. the factors that could be causing the different is because the reactome is using an over representation which might be causing certain pathways to show more significantly compared to ours.

## GO Online
Gene Set Gene Ontology (GO) Enrichment is a method to determine over-represented or under-represented GO terms for a given set of genes. GO terms are formal structured controlled vocabularies (ontologies) for gene products in terms of their biological function. The goal of this analysis is to determine the biological process the given set of genes are associated with.

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway that had the most signficant "Entites p-value" was the regulation of cell migration involving angiogenesis. There are some signicant pathways that overlap and match my previous KEGG results such as the M phase of the cell cycle. One factor that could be causing differences between the two methods is the data from which they are pulling from, since databases might not match perfectly with others. 